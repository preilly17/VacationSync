I need help building a complete, professional travel planner app called VacationSync that integrates with the Amadeus Travel API. My current app is having trouble finding flights because it can't properly match user inputs to airport codes. I want to build this the right way.
üéØ MAIN GOAL
Create a comprehensive travel search app with:

Smart airport/city database that feeds accurate data to Amadeus API
Flight, hotel, and activity search capabilities
Professional user interface with auto-complete
Robust error handling and performance optimization

üîê STEP 1: SECURE API SETUP
Help me properly set up my Amadeus API credentials:

Guide me through storing API key and secret in Replit Secrets
Create OAuth2 authentication system with automatic token refresh
Implement single token reuse for all API endpoints
Include comprehensive error handling for auth failures

üåç STEP 2: BUILD COMPREHENSIVE LOCATION DATABASE
This is critical - create a smart reference database that solves airport code problems:
Database Structure Needed:
json{
  "countries": [
    {
      "name": "United States",
      "code": "US", 
      "aliases": ["USA", "America"],
      "major_cities": ["New York", "Los Angeles"],
      "airport_hubs": ["JFK", "LAX"]
    }
  ],
  "airports": [
    {
      "iata": "JFK",
      "name": "John F Kennedy International",
      "city": "New York",
      "city_aliases": ["NYC", "New York City"],
      "country": "United States",
      "latitude": 40.6413,
      "longitude": -73.7781,
      "is_major": true,
      "serves_international": true,
      "nearby_airports": ["LGA", "EWR"]
    }
  ],
  "cities": [
    {
      "name": "New York",
      "aliases": ["NYC", "New York City", "Big Apple"],
      "country": "United States",
      "airports": [
        {"code": "JFK", "name": "Kennedy Intl", "type": "international"},
        {"code": "LGA", "name": "LaGuardia", "type": "domestic"}, 
        {"code": "EWR", "name": "Newark", "type": "alternative"}
      ],
      "primary_airport": "JFK"
    }
  ]
}
Smart Search Functions:

Fuzzy matching: "new york" ‚Üí "New York" ‚Üí ["JFK", "LGA", "EWR"]
Alias handling: "NYC" ‚Üí "New York" ‚Üí airport options
Typo tolerance: "Los Angelos" ‚Üí "Los Angeles" ‚Üí "LAX"
Multi-airport cities: "London" ‚Üí show LHR, LGW, STN options

Data Sources to Use:

Amadeus Location API to populate database initially
Handle all major cities and airports worldwide
Include popular destinations and tourist hubs
Store locally using IndexedDB for fast access

‚úàÔ∏è STEP 3: COMPREHENSIVE AMADEUS API INTEGRATION
Authentication:

POST /v1/security/oauth2/token (single token for all endpoints)

Location & Reference Data:

GET /v1/reference-data/locations
GET /v1/reference-data/locations/airports
GET /v1/reference-data/locations/cities
GET /v1/reference-data/locations/countries
GET /v1/reference-data/airlines

Flight Search:

GET /v2/shopping/flight-offers (main search)
GET /v1/shopping/flight-destinations (popular destinations)
GET /v1/shopping/flight-dates (flexible dates)

Hotel Search:

GET /v3/shopping/hotel-offers
GET /v2/shopping/hotel-offers/by-hotel
GET /v2/e-reputation/hotel-sentiments (ratings)

Activities:

GET /v1/shopping/activities
GET /v1/shopping/activities/by-square

Analytics:

GET /v1/analytics/air-traffic/traveled (popular routes)
GET /v1/analytics/air-traffic/busiest-period (travel trends)

üé® STEP 4: USER INTERFACE
Create a professional travel search interface:
Search Form:

Auto-complete city/airport input with dropdown suggestions
Date pickers with validation (future dates only)
Passenger count selector
"Search Flights", "Find Hotels", "Discover Activities" buttons

Results Display:

Organized sections for flights, hotels, activities
Sort by price, duration, rating
Show airline names, hotel ratings, activity descriptions
Loading states and progress indicators

Smart Features:

Handle multiple airports per city elegantly
Show "City (Country) - Airport Name (CODE)" format
Suggest alternatives when no results found
Display popular destinations

üõ°Ô∏è STEP 5: ROBUST ERROR HANDLING & PERFORMANCE
Error Recovery:

Network timeout handling (30-second limits)
API rate limiting with exponential backoff
Server error retries (500/502/503)
Invalid input validation before API calls
Graceful fallbacks when APIs fail

Performance Optimization:

Cache API responses for 24-48 hours
Local storage for location database
Compress stored data efficiently
Fast text search with indexing
Progressive loading of results

User Experience:

Clear loading messages ("Searching flights...")
Progress bars for long operations
Helpful error messages (not technical jargon)
Mobile-responsive design

üîÑ STEP 6: SMART FLIGHT SEARCH PROCESS
Enhanced Search Logic:

User types "Los Angeles to Tokyo"
Database lookup: "Los Angeles" ‚Üí LAX, "Tokyo" ‚Üí NRT/HND
Smart selection: For international routes, prefer NRT
Amadeus API call with exact codes: LAX ‚Üí NRT
Display results with human-readable names

Route Intelligence:

Validate routes exist before calling Amadeus
Handle seasonal routes and limited service
Suggest hub airports for better connections
Warn about multiple airports and let user choose

üß™ STEP 7: TESTING & VALIDATION
Automated Tests:

Test API connection on startup
Validate location database completeness
Test search with sample queries
Verify error handling scenarios

User Testing:

Include sample search buttons for common routes
Test with international destinations
Verify mobile responsiveness
Check accessibility features

üìã IMPLEMENTATION REQUIREMENTS
Technical Stack:

TypeScript throughout
Start with Amadeus test environment
Modern async/await syntax
Modular, well-commented code
Local data storage (IndexedDB)

Security:

API keys stored securely in environment variables
Never expose credentials in console logs
Input sanitization for all user data
CORS handling for API calls

Success Criteria:

95%+ flight search success rate
Sub-second response for cached location searches
Handle any major city/airport worldwide
Professional UI comparable to major travel sites

üéØ DELIVERABLES NEEDED
Please provide:

Complete TypeScript implementation with all features
Step-by-step setup instructions for Replit environment
Database initialization scripts
Testing functions to verify everything works
User interface with professional styling
Comprehensive error handling
Performance optimization
Mobile-responsive design

Expected Outcome:
A fully functional travel planner that users can search for flights, hotels, and activities anywhere in the world, with intelligent location matching that eliminates "no results found" errors and provides a professional booking site experience.
Please implement this as a complete, production-ready application with detailed comments explaining each component.